#Importing the necessary libraries
import pandas as pd

#Importing the file, separating on whitespaces, skipping row with --- and declaring -9999 as NaN 
df1 = pd.read_csv('1881591.txt',sep="\s+",skiprows=[1],na_values=['-9999'])

# Resetting indexes so we can fix the columns the way we want them to look like
df2=df1.reset_index()

# Creating a new column with the average temperature per day (max+min)/2
df2['TMAX']=df2['TMAX'].astype(float)
df2['TMIN']=df2['TMIN'].astype(float)
df2['TAVG']=(df2['TMAX']+df2['TMIN'])/2

# Creating 2 new columns with only the year and the month so we can work easier
df2['DATE']=df2['DATE'].astype(str)
df2['YEAR']=df2['DATE'].str.slice(start=0, stop=4)
df2['MONTH']=df2['DATE'].str.slice(start=4, stop=6)
df2['TAVG_C']=((df2['TAVG']-32) * (5/9))

# Grouping firstly by eyar and then by month and creating average values out of it (date column disappears)
df3=df2.groupby(['YEAR','MONTH']).mean()

#grouping by month and calculating the ref temp in a separate dataframe and then turning it into a list 
df4=df2.groupby(['MONTH']).mean()
df4['Ref_Temp']=df4['TAVG_C']
df4=df4.drop(columns=['ELEVATION', 'LATITUDE', 'LONGITUDE', 'PRCP', 'TMAX', 'TMIN', 'TAVG','TAVG_C'])
rtlist=df4['Ref_Temp'].tolist()

# Resetting our main dataframe's indexes so the year and month indexes are normal again
df3=df3.reset_index()

# Allocating the ref_temp from our list into its corresponding rows
df3.loc[df3['MONTH']=='01', 'Ref_Temp'] = rtlist[0]
df3.loc[df3['MONTH']=='02', 'Ref_Temp'] = rtlist[1]
df3.loc[df3['MONTH']=='03', 'Ref_Temp'] = rtlist[2]
df3.loc[df3['MONTH']=='04', 'Ref_Temp'] = rtlist[3]
df3.loc[df3['MONTH']=='05', 'Ref_Temp'] = rtlist[4]
df3.loc[df3['MONTH']=='06', 'Ref_Temp'] = rtlist[5]
df3.loc[df3['MONTH']=='07', 'Ref_Temp'] = rtlist[6]
df3.loc[df3['MONTH']=='08', 'Ref_Temp'] = rtlist[7]
df3.loc[df3['MONTH']=='09', 'Ref_Temp'] = rtlist[8]
df3.loc[df3['MONTH']=='10', 'Ref_Temp'] = rtlist[9]
df3.loc[df3['MONTH']=='11', 'Ref_Temp'] = rtlist[10]
df3.loc[df3['MONTH']=='12', 'Ref_Temp'] = rtlist[11]

# Creating the column diff under which we will operate
df3['Diff']=df3['Ref_Temp']-df3['TAVG_C']

# New clean datafram to work with only some values
monthlyLokka=df3.drop(columns=['LATITUDE', 'LONGITUDE', 'PRCP', 'ELEVATION','TMAX', 'TMIN', 'TAVG'])
monthlyLokka=monthlyLokka.rename(columns={"Diff": "Diff_L","YEAR": "YEAR", "TAVG_C": "TAVG_C_L", "Ref_Temp": "Ref_Temp_L"})
monthlyLokka['MONTH']=monthlyLokka['MONTH'].astype(str)
monthlyLokka['YEAR']=monthlyLokka['YEAR'].astype(str)
monthlyLokka["DATE_m"] = monthlyLokka["YEAR"] + monthlyLokka['MONTH']
monthlyLokka["DATE_m"]=monthlyLokka["DATE_m"].astype(int)
monthlyLokka['MONTH']=monthlyLokka['MONTH'].astype(int)
monthlyLokka['YEAR']=monthlyLokka['YEAR'].astype(int)

#  Creating a separate dataframe in order to define the overall outliers (month) from 1959 to 2016 
monthlyLokka=monthlyLokka.drop([0,1,2,3])
upper_threshold=monthlyLokka['TAVG_C_L'].mean()+(2*monthlyLokka['TAVG_C_L'].std())
lower_threshold=monthlyLokka['TAVG_C_L'].mean()-(2*monthlyLokka['TAVG_C_L'].std())
monthlyLokka['OOutliers']=None
monthlyLokka.loc[(monthlyLokka['TAVG_C_L']>upper_threshold) | (monthlyLokka['TAVG_C_L']<(lower_threshold)),'OOutliers'] = True
monthlyLokka.loc[(monthlyLokka['TAVG_C_L']>=(lower_threshold)) & (monthlyLokka['TAVG_C_L']<=(upper_threshold)) ,'OOutliers'] = False
print("The upper threshold to detect anomalies was set at: ", upper_threshold)
print("The lower threshold to detect anomalies was set at: ", lower_threshold)
OverallOutliers=monthlyLokka.loc[monthlyLokka['OOutliers']==True]
print(OverallOutliers)

# Importing the helsinki file from a csv generated by the previous program...
monthlyHelsinki = pd.read_csv('helsinki_monthly.csv')
monthlyHelsinki=monthlyHelsinki.rename(columns={"Diff": "Diff_H","DATE": "YEAR", "Month": "MONTH", "temp_celsius": "TAVG_C_H", "ref_temp": "Ref_Temp_H"})

#both=pd.merge(monthlyHelsinki,monthlyLokka, on = 'DATE_m')
both=pd.merge(monthlyHelsinki,monthlyLokka, on = 'DATE_m')
both=both.drop(columns=['MONTH_y', 'YEAR_y', 'Unnamed: 0'])
both=both.rename(columns={'MONTH_x':'MONTH', 'YEAR_x':'YEAR'})

#Exporting to csv so we can work with the mex file
both.to_csv(r'SodankylaHelsinkiDays.csv')

# Grouping the info by month, and getting the differences in temperature
bymonth=both.groupby(['MONTH']).mean()
bymonth['Monthly_Diff']=bymonth['TAVG_C_H']-bymonth['TAVG_C_L']
bymonth=bymonth.drop(columns=['YEAR','DATE_m'])
bymonth=bymonth.reset_index()

#Grouping the summer months 
june=bymonth['TAVG_C_H'][5]-bymonth['TAVG_C_L'][5]
july=bymonth['TAVG_C_H'][6]-bymonth['TAVG_C_L'][6]
august=bymonth['TAVG_C_H'][7]-bymonth['TAVG_C_L'][7]
print("June temperatures between Helsinki and Sodankyla (1953-2016) have an average difference in temperature of ",june)
print("July temperatures between Helsinki and Sodankyla (1953-2016) have an average difference in temperature of ",july)
print("August temperatures between Helsinki and Sodankyla (1953-2016) have an average difference in temperature of ",august)
summercomp=bymonth.loc[(bymonth['MONTH']>5) & (bymonth['MONTH']<9)]
summer=(summercomp['TAVG_C_H'].mean())-(summercomp['TAVG_C_L'].mean())
print("Summer temperatures between Helsinki and Sodankyla (1953-2016) have an average difference in temperature of ", summer)

#Exporting to csv file
bymonth.to_csv(r'Helsinki_VS_Sodankyla.csv')

#Average temperatures for summer, by station
summerH=summercomp['TAVG_C_H'].mean()
summerL=summercomp['TAVG_C_L'].mean()
print("Summer average temperature for Helsinki (1953-2016) was ",summerH)
print("Summer average temperature for Sodankyla (1953-2016) was ",summerL)

#Standard deviation
summerH=summercomp['TAVG_C_H'].std()
summerL=summercomp['TAVG_C_L'].std()
print("Summer standard deviation in temperature for Helsinki (1953-2016) was ",summerH)
print("Summer standard deviation in temperature for Sodankyla (1953-2016) was ",summerL)